@model SocialWelfare.Models.ViewModels.SocialWelfareReportViewModel
@using SocialWelfare.Models

@{
    ViewData["Title"] = "Approved Applications Dashboard";
    Layout = "/Views/Shared/_DashboardLayout.cshtml";
}

<!-- Add Bootstrap and Font Awesome CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<!-- Add DataTables CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css">

<link href="~/css/Reports.css" rel="stylesheet" />

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">@ViewData["Title"]</h2>
            <p class="text-muted mb-0">Generated on: @DateTime.Now.ToString("yyyy-MM-dd HH:mm")</p>
        </div>
    </div>

    <div class="card">
        <!-- Tabbed Reports -->
        <ul class="nav nav-tabs card-header-tabs" id="reportTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="foodpack-tab" data-toggle="tab" href="#foodpack" role="tab">
                    <i class="fas fa-utensils mr-2"></i>Food Packs
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="indigency-tab" data-toggle="tab" href="#indigency" role="tab">
                    <i class="fas fa-file-certificate mr-2"></i>Indigency Certificates
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="consultation-tab" data-toggle="tab" href="#consultation" role="tab">
                    <i class="fas fa-comment-medical mr-2"></i>Consultations
                </a>
            </li>
        </ul>

        <div class="card-body p-0">
            <div class="tab-content">
                <!-- Approved Food Pack Report -->
                <div class="tab-pane fade show active" id="foodpack" role="tabpanel">
                    <div class="p-4">
                        <h4 class="d-flex align-items-center">
                            <i class="fas fa-utensils text-primary mr-3"></i>
                            Approved Food Pack Distribution
                        </h4>
                        <!-- Date Filter for Food Packs -->
                        <div class="date-filter-container">
                            <div class="date-filter-title">Filter by Date Range</div>
                            <div class="date-filter-group">
                                <div class="date-filter-input">
                                    <span class="date-filter-label">From:</span>
                                    <input type="date" id="foodpack-date-from" class="form-control" />
                                </div>
                                <div class="date-filter-input">
                                    <span class="date-filter-label">To:</span>
                                    <input type="date" id="foodpack-date-to" class="form-control" />
                                </div>
                                <button class="btn btn-primary date-filter-btn" onclick="filterFoodPackTable()">
                                    <i class="fas fa-filter"></i> Apply Filter
                                </button>
                                <button class="btn btn-outline-secondary" onclick="resetFoodPackFilter()">
                                    <i class="fas fa-times"></i> Reset
                                </button>
                            </div>
                        </div>
                        @{
                            var approvedFoodPacks = Model.FoodPacks.Where(f => f.Status == ActiveStatus.Approved).ToList();
                        }
                        @if (approvedFoodPacks.Any())
                        {
                            <div class="table-responsive">
                                <table id="foodpackTable" class="table table-striped table-bordered" style="width:100%">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Age</th>
                                            <th>Barangay</th>
                                            <th>Packs</th>
                                            <th>Reason</th>
                                            <th>Approved By</th>
                                            <th>Request Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in approvedFoodPacks)
                                        {
                                            <tr>
                                                <td>@item.Id</td>
                                                <td>@Html.Encode(item.FullName)</td>
                                                <td>@item.Age</td>
                                                <td>@Html.Encode(item.Barangay)</td>
                                                <td>@item.Packs</td>
                                                <td>@Html.Encode(item.Reason)</td>
                                                <td>@Html.Encode(item.ApprovedBy?.FullName ?? "N/A")</td>
                                                <td>@item.RequestDate.ToString("yyyy-MM-dd")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle mr-2"></i>No approved food pack records found.
                            </div>
                        }
                    </div>
                </div>

                <!-- Approved Indigency Certificate Report -->
                <div class="tab-pane fade" id="indigency" role="tabpanel">
                    <div class="p-4">
                        <h4 class="d-flex align-items-center">
                            <i class="fas fa-file-certificate text-success mr-3"></i>
                            Approved Certificates of Indigency
                        </h4>
                        <!-- Date Filter for Indigency Certificates -->
                        <div class="date-filter-container">
                            <div class="date-filter-title">Filter by Date Range</div>
                            <div class="date-filter-group">
                                <div class="date-filter-input">
                                    <span class="date-filter-label">From:</span>
                                    <input type="date" id="indigency-date-from" class="form-control" />
                                </div>
                                <div class="date-filter-input">
                                    <span class="date-filter-label">To:</span>
                                    <input type="date" id="indigency-date-to" class="form-control" />
                                </div>
                                <button class="btn btn-primary date-filter-btn" onclick="filterIndigencyTable()">
                                    <i class="fas fa-filter"></i> Apply Filter
                                </button>
                                <button class="btn btn-outline-secondary" onclick="resetIndigencyFilter()">
                                    <i class="fas fa-times"></i> Reset
                                </button>
                            </div>
                        </div>
                        @{
                            var approvedIndigencies = Model.Indigencies.Where(i => i.Status1 == ActiveStatus1.Approved).ToList();
                        }
                        @if (approvedIndigencies.Any())
                        {
                            <div class="table-responsive">
                                <table id="indigencyTable" class="table table-striped table-bordered" style="width:100%">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Age</th>
                                            <th>Barangay</th>
                                            <th>Reason</th>
                                            <th>Approved By</th>
                                            <th>Request Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in approvedIndigencies)
                                        {
                                            <tr>
                                                <td>@item.Id</td>
                                                <td>@Html.Encode(item.FullName)</td>
                                                <td>@item.Age1</td>
                                                <td>@Html.Encode(item.Barangay1)</td>
                                                <td>@Html.Encode(item.Reason1)</td>
                                                <td>@Html.Encode(item.ApprovedBy?.FullName ?? "N/A")</td>
                                                <td>@item.RequestDate1.ToString("yyyy-MM-dd")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle mr-2"></i>No approved indigency certificate records found.
                            </div>
                        }
                    </div>
                </div>

                <!-- Approved Consultation Report -->
                <div class="tab-pane fade" id="consultation" role="tabpanel">
                    <div class="p-4">
                        <h4 class="d-flex align-items-center">
                            <i class="fas fa-comment-medical text-info mr-3"></i>
                            Approved Consultations
                        </h4>
                        <!-- Date Filter for Consultations -->
                        <div class="date-filter-container">
                            <div class="date-filter-title">Filter by Date Range</div>
                            <div class="date-filter-group">
                                <div class="date-filter-input">
                                    <span class="date-filter-label">From:</span>
                                    <input type="date" id="consultation-date-from" class="form-control" />
                                </div>
                                <div class="date-filter-input">
                                    <span class="date-filter-label">To:</span>
                                    <input type="date" id="consultation-date-to" class="form-control" />
                                </div>
                                <button class="btn btn-primary date-filter-btn" onclick="filterConsultationTable()">
                                    <i class="fas fa-filter"></i> Apply Filter
                                </button>
                                <button class="btn btn-outline-secondary" onclick="resetConsultationFilter()">
                                    <i class="fas fa-times"></i> Reset
                                </button>
                            </div>
                        </div>
                        @{
                            var approvedConsultations = Model.Consultations.Where(c => c.Consultation_status == ActiveStatus2.Approved).ToList();
                        }
                        @if (approvedConsultations.Any())
                        {
                            <div class="table-responsive">
                                <table id="consultationTable" class="table table-striped table-bordered" style="width:100%">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Contact</th>
                                            <th>Date</th>
                                            <th>Time</th>
                                            <th>Approved By</th>
                                            <th>Request Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in approvedConsultations)
                                        {
                                            <tr>
                                                <td>@item.Id</td>
                                                <td>@Html.Encode(item.FullName)</td>
                                                <td>@Html.Encode(item.ContactNumber2)</td>
                                                <td>@item.Consultation_Date.ToString("yyyy-MM-dd")</td>
                                                <td>@item.Consultation_Time.ToString("hh:mm tt")</td>
                                                <td>@Html.Encode(item.ApprovedBy?.FullName ?? "N/A")</td>
                                                <td>@item.RequestDate.ToString("yyyy-MM-dd")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle mr-2"></i>No approved consultation records found.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Buttons -->
    <div class="d-flex justify-content-end mt-4 no-print">
        <div class="btn-group-export">
            <button class="btn btn-primary" onclick="printFoodPackReport()">
                <i class="fas fa-print"></i> Print Food Pack Report
            </button>
            <button class="btn btn-primary" onclick="printIndigencyReport()">
                <i class="fas fa-print"></i> Print Indigency Report
            </button>
            <button class="btn btn-primary" onclick="printConsultationReport()">
                <i class="fas fa-print"></i> Print Consultation Report
            </button>
        </div>
    </div>
</div>

<!-- Hidden print sections with dynamic filtering -->
<div id="foodpack-print" class="print-section" style="display:none;">
    <div class="report-header">
        <div class="report-title">SOCIAL WELFARE DEPARTMENT</div>
        <div class="report-subtitle">APPROVED FOOD PACK DISTRIBUTION REPORT</div>
        <div class="report-date">As of @DateTime.Now.ToString("yyyy-MM-dd HH:mm")</div>
        <div class="report-date" id="foodpack-date-range"></div>
    </div>
    <table class="report-table">
        <thead>
            <tr>
                <th># FULL NAME</th>
                <th>OF PACKS, REASON, APPROVED BY, REQUEST DATE</th>
            </tr>
        </thead>
        <tbody id="foodpack-print-body"></tbody>
    </table>
</div>

<div id="indigency-print" class="print-section" style="display:none;">
    <div class="report-header">
        <div class="report-title">SOCIAL WELFARE DEPARTMENT</div>
        <div class="report-subtitle">APPROVED CERTIFICATES OF INDIGENCY REPORT</div>
        <div class="report-date">As of @DateTime.Now.ToString("yyyy-MM-dd HH:mm")</div>
        <div class="report-date" id="indigency-date-range"></div>
    </div>
    <table class="report-table">
        <thead>
            <tr>
                <th># FULL NAME</th>
                <th>AGE, BARANGAY, REASON, APPROVED BY, REQUEST DATE</th>
            </tr>
        </thead>
        <tbody id="indigency-print-body"></tbody>
    </table>
</div>

<div id="consultation-print" class="print-section" style="display:none;">
    <div class="report-header">
        <div class="report-title">SOCIAL WELFARE DEPARTMENT</div>
        <div class="report-subtitle">APPROVED CONSULTATIONS REPORT</div>
        <div class="report-date">As of @DateTime.Now.ToString("yyyy-MM-dd HH:mm")</div>
        <div class="report-date" id="consultation-date-range"></div>
    </div>
    <table class="report-table">
        <thead>
            <tr>
                <th># FULL NAME</th>
                <th>CONTACT, DATE, TIME, APPROVED BY, REQUEST DATE</th>
            </tr>
        </thead>
        <tbody id="consultation-print-body"></tbody>
    </table>
</div>

@functions {
    string GetStatusBadgeClass(object status)
    {
        if (status == null) return "badge-secondary";
        string statusStr = status.ToString();
        return statusStr switch
        {
            "Approved" => "badge-success",
            "Denied" => "badge-danger",
            "Pending" => "badge-warning",
            "Process" => "badge-info",
            _ => "badge-secondary"
        };
    }
}

<!-- JavaScript Dependencies -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
<script src="https://cdn.sheetjs.com/xlsx-0.19.3/package/dist/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/additional-methods.min.js"></script>

<script>
    // Initialize DataTables for each table when their tab is shown
    $(document).ready(function () {
        // Initialize the first table (foodpack) immediately
        var foodpackTable = $('#foodpackTable').DataTable({
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'excel',
                    text: '<i class="fas fa-file-excel"></i> Export to Excel',
                    className: 'btn btn-success',
                    exportOptions: {
                        modifier: {
                            page: 'all'
                        }
                    }
                }
            ],
            responsive: true,
            pageLength: 10,
            lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
            columnDefs: [
                { targets: [7], type: 'date' }
            ]
        });

        // Initialize other tables when their tabs are shown
        $('#indigency-tab').on('shown.bs.tab', function (e) {
            if (!$.fn.DataTable.isDataTable('#indigencyTable')) {
                var indigencyTable = $('#indigencyTable').DataTable({
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'excel',
                            text: '<i class="fas fa-file-excel"></i> Export to Excel',
                            className: 'btn btn-success',
                            exportOptions: {
                                modifier: {
                                    page: 'all'
                                }
                            }
                        }
                    ],
                    responsive: true,
                    pageLength: 10,
                    lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                    columnDefs: [
                        { targets: [6], type: 'date' }
                    ]
                });
            }
        });

        $('#consultation-tab').on('shown.bs.tab', function (e) {
            if (!$.fn.DataTable.isDataTable('#consultationTable')) {
                var consultationTable = $('#consultationTable').DataTable({
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'excel',
                            text: '<i class="fas fa-file-excel"></i> Export to Excel',
                            className: 'btn btn-success',
                            exportOptions: {
                                modifier: {
                                    page: 'all'
                                }
                            }
                        }
                    ],
                    responsive: true,
                    pageLength: 10,
                    lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                    columnDefs: [
                        { targets: [3, 6], type: 'date' }
                    ]
                });
            }
        });

        // Store and restore active tab
        var activeTab = localStorage.getItem('activeTab');
        if (activeTab) {
            $('#reportTabs a[href="' + activeTab + '"]').tab('show');
            // Trigger DataTable initialization for the active tab
            if (activeTab === '#indigency' && !$.fn.DataTable.isDataTable('#indigencyTable')) {
                $('#indigency-tab').trigger('shown.bs.tab');
            } else if (activeTab === '#consultation' && !$.fn.DataTable.isDataTable('#consultationTable')) {
                $('#consultation-tab').trigger('shown.bs.tab');
            }
        }

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            localStorage.setItem('activeTab', $(e.target).attr('href'));
        });

        // Validate date inputs
        $.validator.addMethod("dateRange", function (value, element, params) {
            var fromDate = $('#' + params.from).val();
            var toDate = $('#' + params.to).val();
            if (fromDate && toDate) {
                return new Date(toDate) >= new Date(fromDate);
            }
            return true;
        }, "End date must be after start date.");

        $('#foodpack-date-from, #foodpack-date-to, #indigency-date-from, #indigency-date-to, #consultation-date-from, #consultation-date-to').each(function () {
            $(this).rules('add', {
                dateRange: {
                    from: $(this).attr('id').includes('from') ? $(this).attr('id') : $(this).attr('id').replace('to', 'from'),
                    to: $(this).attr('id').includes('to') ? $(this).attr('id') : $(this).attr('id').replace('from', 'to')
                }
            });
        });
    });

    // Filter functions for each table
    function filterFoodPackTable() {
        var fromDate = $('#foodpack-date-from').val();
        var toDate = $('#foodpack-date-to').val();
        var table = $('#foodpackTable').DataTable();

        if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
            alert('End date must be after start date.');
            return;
        }

        table.columns().search('').draw();

        if (fromDate || toDate) {
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var dateColumn = 7;
                    var cellDateStr = data[dateColumn];
                    var cellDate = new Date(cellDateStr);
                    var from = fromDate ? new Date(fromDate) : null;
                    var to = toDate ? new Date(toDate) : null;

                    if (from && to) {
                        return cellDate >= from && cellDate <= to;
                    } else if (from) {
                        return cellDate >= from;
                    } else if (to) {
                        return cellDate <= to;
                    }
                    return true;
                }
            );
        }

        table.draw();
        $.fn.dataTable.ext.search.pop();
    }

    function filterIndigencyTable() {
        var fromDate = $('#indigency-date-from').val();
        var toDate = $('#indigency-date-to').val();
        var table = $('#indigencyTable').DataTable();

        if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
            alert('End date must be after start date.');
            return;
        }

        table.columns().search('').draw();

        if (fromDate || toDate) {
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var dateColumn = 6;
                    var cellDateStr = data[dateColumn];
                    var cellDate = new Date(cellDateStr);
                    var from = fromDate ? new Date(fromDate) : null;
                    var to = toDate ? new Date(toDate) : null;

                    if (from && to) {
                        return cellDate >= from && cellDate <= to;
                    } else if (from) {
                        return cellDate >= from;
                    } else if (to) {
                        return cellDate <= to;
                    }
                    return true;
                }
            );
        }

        table.draw();
        $.fn.dataTable.ext.search.pop();
    }

    function filterConsultationTable() {
        var fromDate = $('#consultation-date-from').val();
        var toDate = $('#consultation-date-to').val();
        var table = $('#consultationTable').DataTable();

        if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
            alert('End date must be after start date.');
            return;
        }

        table.columns().search('').draw();

        if (fromDate || toDate) {
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var dateColumn = 6;
                    var cellDateStr = data[dateColumn];
                    var cellDate = new Date(cellDateStr);
                    var from = fromDate ? new Date(fromDate) : null;
                    var to = toDate ? new Date(toDate) : null;

                    if (from && to) {
                        return cellDate >= from && cellDate <= to;
                    } else if (from) {
                        return cellDate >= from;
                    } else if (to) {
                        return cellDate <= to;
                    }
                    return true;
                }
            );
        }

        table.draw();
        $.fn.dataTable.ext.search.pop();
    }

    // Reset filter functions
    function resetFoodPackFilter() {
        $('#foodpack-date-from').val('');
        $('#foodpack-date-to').val('');
        var table = $('#foodpackTable').DataTable();
        table.columns().search('').draw();
    }

    function resetIndigencyFilter() {
        $('#indigency-date-from').val('');
        $('#indigency-date-to').val('');
        var table = $('#indigencyTable').DataTable();
        table.columns().search('').draw();
    }

    function resetConsultationFilter() {
        $('#consultation-date-from').val('');
        $('#consultation-date-to').val('');
        var table = $('#consultationTable').DataTable();
        table.columns().search('').draw();
    }

    // Data for print sections (assumed to be available client-side for filtering)
    const foodPackData = @Html.Raw(Json.Serialize(Model.FoodPacks.Where(f => f.Status == ActiveStatus.Approved).Select(f => new {
        Id = f.Id,
        FullName = f.FullName,
        Packs = f.Packs,
        Reason = f.Reason,
        ApprovedBy = f.ApprovedBy?.FullName ?? "N/A",
        RequestDate = f.RequestDate.ToString("yyyy-MM-dd")
    })));

    const indigencyData = @Html.Raw(Json.Serialize(Model.Indigencies.Where(i => i.Status1 == ActiveStatus1.Approved).Select(i => new {
        Id = i.Id,
        FullName = i.FullName,
        Age = i.Age1,
        Barangay = i.Barangay1,
        Reason = i.Reason1,
        ApprovedBy = i.ApprovedBy?.FullName ?? "N/A",
        RequestDate = i.RequestDate1.ToString("yyyy-MM-dd")
    })));

    const consultationData = @Html.Raw(Json.Serialize(Model.Consultations.Where(c => c.Consultation_status == ActiveStatus2.Approved).Select(c => new {
        Id = c.Id,
        FullName = c.FullName,
        ContactNumber = c.ContactNumber2,
        ConsultationDate = c.Consultation_Date.ToString("yyyy-MM-dd"),
        ConsultationTime = c.Consultation_Time.ToString("hh:mm tt"),
        ApprovedBy = c.ApprovedBy?.FullName ?? "N/A",
        RequestDate = c.RequestDate.ToString("yyyy-MM-dd")
    })));

    // Print functions with date range filtering
    function printFoodPackReport() {
        const fromDate = $('#foodpack-date-from').val();
        const toDate = $('#foodpack-date-to').val();
        const printSection = document.getElementById('foodpack-print');
        const printBody = document.getElementById('foodpack-print-body');

        if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
            alert('End date must be after start date.');
            return;
        }

        // Update date range in print header
        const dateRangeElement = printSection.querySelector('#foodpack-date-range');
        if (fromDate || toDate) {
            const fromText = fromDate ? new Date(fromDate).toLocaleDateString() : 'Start';
            const toText = toDate ? new Date(toDate).toLocaleDateString() : 'End';
            dateRangeElement.textContent = `Date Range: ${fromText} to ${toText}`;
        } else {
            dateRangeElement.textContent = 'All Dates';
        }

        // Filter data based on date range
        let filteredData = foodPackData;
        if (fromDate || toDate) {
            filteredData = foodPackData.filter(item => {
                const requestDate = new Date(item.RequestDate);
                const from = fromDate ? new Date(fromDate) : null;
                const to = toDate ? new Date(toDate) : null;
                if (from && to) {
                    return requestDate >= from && requestDate <= to;
                } else if (from) {
                    return requestDate >= from;
                } else if (to) {
                    return requestDate <= to;
                }
                return true;
            });
        }

        // Populate print body
        printBody.innerHTML = '';
        let counter = 1;
        filteredData.forEach(item => {
            printBody.innerHTML += `
                <tr>
                    <td>${counter} FN: ${item.FullName}</td>
                    <td>${item.Packs}, ${item.Reason}, ${item.ApprovedBy}, ${item.RequestDate}</td>
                </tr>`;
            counter++;
        });
        printBody.innerHTML += `
            <tr>
                <td colspan="2">Total Approved Food Packs: ${filteredData.length}</td>
            </tr>`;

        printReport(printSection);
    }

    function printIndigencyReport() {
        const fromDate = $('#indigency-date-from').val();
        const toDate = $('#indigency-date-to').val();
        const printSection = document.getElementById('indigency-print');
        const printBody = document.getElementById('indigency-print-body');

        if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
            alert('End date must be after start date.');
            return;
        }

        // Update date range in print header
        const dateRangeElement = printSection.querySelector('#indigency-date-range');
        if (fromDate || toDate) {
            const fromText = fromDate ? new Date(fromDate).toLocaleDateString() : 'Start';
            const toText = toDate ? new Date(toDate).toLocaleDateString() : 'End';
            dateRangeElement.textContent = `Date Range: ${fromText} to ${toText}`;
        } else {
            dateRangeElement.textContent = 'All Dates';
        }

        // Filter data based on date range
        let filteredData = indigencyData;
        if (fromDate || toDate) {
            filteredData = indigencyData.filter(item => {
                const requestDate = new Date(item.RequestDate);
                const from = fromDate ? new Date(fromDate) : null;
                const to = toDate ? new Date(toDate) : null;
                if (from && to) {
                    return requestDate >= from && requestDate <= to;
                } else if (from) {
                    return requestDate >= from;
                } else if (to) {
                    return requestDate <= to;
                }
                return true;
            });
        }

        // Populate print body
        printBody.innerHTML = '';
        let counter = 1;
        filteredData.forEach(item => {
            printBody.innerHTML += `
                <tr>
                    <td>${counter} FN: ${item.FullName}</td>
                    <td>${item.Age} y/o, ${item.Barangay}, ${item.Reason}, ${item.ApprovedBy}, ${item.RequestDate}</td>
                </tr>`;
            counter++;
        });
        printBody.innerHTML += `
            <tr>
                <td colspan="2">Total Approved Indigency Certificates: ${filteredData.length}</td>
            </tr>`;

        printReport(printSection);
    }

    function printConsultationReport() {
        const fromDate = $('#consultation-date-from').val();
        const toDate = $('#consultation-date-to').val();
        const printSection = document.getElementById('consultation-print');
        const printBody = document.getElementById('consultation-print-body');

        if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {
            alert('End date must be after start date.');
            return;
        }

        // Update date range in print header
        const dateRangeElement = printSection.querySelector('#consultation-date-range');
        if (fromDate || toDate) {
            const fromText = fromDate ? new Date(fromDate).toLocaleDateString() : 'Start';
            const toText = toDate ? new Date(toDate).toLocaleDateString() : 'End';
            dateRangeElement.textContent = `Date Range: ${fromText} to ${toText}`;
        } else {
            dateRangeElement.textContent = 'All Dates';
        }

        // Filter data based on date range
        let filteredData = consultationData;
        if (fromDate || toDate) {
            filteredData = consultationData.filter(item => {
                const requestDate = new Date(item.RequestDate);
                const from = fromDate ? new Date(fromDate) : null;
                const to = toDate ? new Date(toDate) : null;
                if (from && to) {
                    return requestDate >= from && requestDate <= to;
                } else if (from) {
                    return requestDate >= from;
                } else if (to) {
                    return requestDate <= to;
                }
                return true;
            });
        }

        // Populate print body
        printBody.innerHTML = '';
        let counter = 1;
        filteredData.forEach(item => {
            printBody.innerHTML += `
                <tr>
                    <td>${counter} FN: ${item.FullName}</td>
                    <td>${item.ContactNumber}, ${item.ConsultationDate}, ${item.ConsultationTime}, ${item.ApprovedBy}, ${item.RequestDate}</td>
                </tr>`;
            counter++;
        });
        printBody.innerHTML += `
            <tr>
                <td colspan="2">Total Approved Consultations: ${filteredData.length}</td>
            </tr>`;

        printReport(printSection);
    }

    function printReport(printSection) {
        const originalContents = document.body.innerHTML;
        printSection.style.display = 'block';
        document.body.innerHTML = printSection.outerHTML;
        window.print();
        document.body.innerHTML = originalContents;
        printSection.style.display = 'none';
        location.reload(); // Reload to restore DataTables and other dynamic content
    }
</script>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}